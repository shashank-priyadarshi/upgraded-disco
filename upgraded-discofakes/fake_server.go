// Code generated by counterfeiter. DO NOT EDIT.
package upgradeddiscofakes

import (
	main "server"
	"sync"
)

type FakeServer struct {
	StartServerStub        func()
	startServerMutex       sync.RWMutex
	startServerArgsForCall []struct {
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeServer) StartServer() {
	fake.startServerMutex.Lock()
	fake.startServerArgsForCall = append(fake.startServerArgsForCall, struct {
	}{})
	stub := fake.StartServerStub
	fake.recordInvocation("StartServer", []interface{}{})
	fake.startServerMutex.Unlock()
	if stub != nil {
		fake.StartServerStub()
	}
}

func (fake *FakeServer) StartServerCallCount() int {
	fake.startServerMutex.RLock()
	defer fake.startServerMutex.RUnlock()
	return len(fake.startServerArgsForCall)
}

func (fake *FakeServer) StartServerCalls(stub func()) {
	fake.startServerMutex.Lock()
	defer fake.startServerMutex.Unlock()
	fake.StartServerStub = stub
}

func (fake *FakeServer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.startServerMutex.RLock()
	defer fake.startServerMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeServer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ main.Server = new(FakeServer)
